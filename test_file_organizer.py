#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤ –ø–æ –ø–∞–ø–∫–∞–º
"""

import os
import sys
import tempfile
import shutil
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—é packer
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '.'))

from packer.file_organizer import create_material_folder_structure, get_organized_file_path


def test_folder_creation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫"""
    print("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫ ===")
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    with tempfile.TemporaryDirectory() as temp_dir:
        print(f"–í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {temp_dir}")
        
        # –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ (S)
        print("\n--- –¢–µ—Å—Ç 1: –ú–∞—Ç–µ—Ä–∏–∞–ª S, —Ç–æ–ª—â–∏–Ω–∞ 16 ---")
        main_folder, clean_folder = create_material_folder_structure(16, 'S', temp_dir)
        print(f"–û—Å–Ω–æ–≤–Ω–∞—è –ø–∞–ø–∫–∞: {main_folder}")
        print(f"Clean –ø–∞–ø–∫–∞: {clean_folder}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞–ø–∫–∏ —Å–æ–∑–¥–∞–Ω—ã
        assert os.path.exists(main_folder), "–û—Å–Ω–æ–≤–Ω–∞—è –ø–∞–ø–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞"
        assert os.path.exists(clean_folder), "Clean –ø–∞–ø–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –ø–∞–ø–æ–∫
        expected_main = os.path.join(temp_dir, "16mm")
        expected_clean = os.path.join(temp_dir, "16mm", "16mm_clean")
        assert main_folder == expected_main, f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞–ø–∫–∏: {main_folder}"
        assert clean_folder == expected_clean, f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ clean –ø–∞–ø–∫–∏: {clean_folder}"
        print("‚úì –¢–µ—Å—Ç 1 –ø—Ä–æ–π–¥–µ–Ω")
        
        # –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞ V, —Ç–æ–ª—â–∏–Ω–∞ 18
        print("\n--- –¢–µ—Å—Ç 2: –ú–∞—Ç–µ—Ä–∏–∞–ª V, —Ç–æ–ª—â–∏–Ω–∞ 18 ---")
        main_folder2, clean_folder2 = create_material_folder_structure(18, 'V', temp_dir)
        print(f"–û—Å–Ω–æ–≤–Ω–∞—è –ø–∞–ø–∫–∞: {main_folder2}")
        print(f"Clean –ø–∞–ø–∫–∞: {clean_folder2}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞–ø–∫–∏ —Å–æ–∑–¥–∞–Ω—ã
        assert os.path.exists(main_folder2), "–û—Å–Ω–æ–≤–Ω–∞—è –ø–∞–ø–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞"
        assert os.path.exists(clean_folder2), "Clean –ø–∞–ø–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –ø–∞–ø–æ–∫
        expected_main2 = os.path.join(temp_dir, "18mm_V")
        expected_clean2 = os.path.join(temp_dir, "18mm_V", "18mm_V_clean")
        assert main_folder2 == expected_main2, f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞–ø–∫–∏: {main_folder2}"
        assert clean_folder2 == expected_clean2, f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ clean –ø–∞–ø–∫–∏: {clean_folder2}"
        print("‚úì –¢–µ—Å—Ç 2 –ø—Ä–æ–π–¥–µ–Ω")
        
        # –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è –¥—Ä–æ–±–Ω–æ–π —Ç–æ–ª—â–∏–Ω—ã
        print("\n--- –¢–µ—Å—Ç 3: –ú–∞—Ç–µ—Ä–∏–∞–ª S, —Ç–æ–ª—â–∏–Ω–∞ 15.5 ---")
        main_folder3, clean_folder3 = create_material_folder_structure(15.5, 'S', temp_dir)
        print(f"–û—Å–Ω–æ–≤–Ω–∞—è –ø–∞–ø–∫–∞: {main_folder3}")
        print(f"Clean –ø–∞–ø–∫–∞: {clean_folder3}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞–ø–∫–∏ —Å–æ–∑–¥–∞–Ω—ã
        assert os.path.exists(main_folder3), "–û—Å–Ω–æ–≤–Ω–∞—è –ø–∞–ø–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞"
        assert os.path.exists(clean_folder3), "Clean –ø–∞–ø–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –ø–∞–ø–æ–∫ –¥–ª—è –¥—Ä–æ–±–Ω–æ–π —Ç–æ–ª—â–∏–Ω—ã
        expected_main3 = os.path.join(temp_dir, "15.5mm")
        expected_clean3 = os.path.join(temp_dir, "15.5mm", "15.5mm_clean")
        assert main_folder3 == expected_main3, f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞–ø–∫–∏: {main_folder3}"
        assert clean_folder3 == expected_clean3, f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ clean –ø–∞–ø–∫–∏: {clean_folder3}"
        print("‚úì –¢–µ—Å—Ç 3 –ø—Ä–æ–π–¥–µ–Ω")
        
        print("\n=== –í—Å–µ —Ç–µ—Å—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–æ–∫ –ø—Ä–æ–π–¥–µ–Ω—ã! ===")


def test_file_path_organization():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª–∞–º"""
    print("\n=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø—É—Ç–µ–π —Ñ–∞–π–ª–æ–≤ ===")
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    with tempfile.TemporaryDirectory() as temp_dir:
        print(f"–í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {temp_dir}")
        
        # –¢–µ—Å—Ç 1: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
        print("\n--- –¢–µ—Å—Ç 1: –ü—É—Ç—å —Ñ–∞–π–ª–∞ –¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞ S, —Ç–æ–ª—â–∏–Ω–∞ 16 ---")
        filename = "sheet_16mm_0.dxf"
        file_path = get_organized_file_path(16, 'S', filename, temp_dir)
        print(f"–ü–æ–ª–Ω—ã–π –ø—É—Ç—å: {file_path}")
        
        expected_path = os.path.join(temp_dir, "16mm", filename)
        assert file_path == expected_path, f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å: {file_path}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞
        parent_dir = os.path.dirname(file_path)
        assert os.path.exists(parent_dir), "–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –ø–∞–ø–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞"
        print("‚úì –¢–µ—Å—Ç 1 –ø—Ä–æ–π–¥–µ–Ω")
        
        # –¢–µ—Å—Ç 2: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞ V
        print("\n--- –¢–µ—Å—Ç 2: –ü—É—Ç—å —Ñ–∞–π–ª–∞ –¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞ V, —Ç–æ–ª—â–∏–Ω–∞ 18 ---")
        filename2 = "12_800x600_18mm_V.dxf"
        file_path2 = get_organized_file_path(18, 'V', filename2, temp_dir)
        print(f"–ü–æ–ª–Ω—ã–π –ø—É—Ç—å: {file_path2}")
        
        expected_path2 = os.path.join(temp_dir, "18mm_V", filename2)
        assert file_path2 == expected_path2, f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å: {file_path2}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞
        parent_dir2 = os.path.dirname(file_path2)
        assert os.path.exists(parent_dir2), "–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –ø–∞–ø–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ clean –ø–∞–ø–∫–∞ —Ç–æ–∂–µ —Å–æ–∑–¥–∞–Ω–∞
        clean_dir = os.path.join(parent_dir2, "18mm_V_clean")
        assert os.path.exists(clean_dir), "Clean –ø–∞–ø–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞"
        print("‚úì –¢–µ—Å—Ç 2 –ø—Ä–æ–π–¥–µ–Ω")
        
        print("\n=== –í—Å–µ —Ç–µ—Å—Ç—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø—É—Ç–µ–π –ø—Ä–æ–π–¥–µ–Ω—ã! ===")


def test_real_world_scenario():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    print("\n=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è ===")
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    with tempfile.TemporaryDirectory() as temp_dir:
        print(f"–í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {temp_dir}")
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –∫–∞—Ä—Ç —Ä–∞—Å–∫—Ä–æ—è
        test_files = [
            (16, 'S', 'sheet_16mm_0.dxf'),
            (16, 'S', 'sheet_16mm_1.dxf'),
            (18, 'V', '12_800x600_18mm_V.dxf'),
            (18, 'V', '15_1200x800_18mm_V.dxf'),
            (20, 'L', 'sheet_20mm_L_0.dxf'),
        ]
        
        created_files = []
        
        for thickness, material, filename in test_files:
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø—É—Ç—å
            file_path = get_organized_file_path(thickness, material, filename, temp_dir)
            
            # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            with open(file_path, 'w') as f:
                f.write(f"Test file: {filename}")
            
            created_files.append(file_path)
            print(f"–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {file_path}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫
        print("\n--- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫ ---")
        for root, dirs, files in os.walk(temp_dir):
            level = root.replace(temp_dir, '').count(os.sep)
            indent = ' ' * 2 * level
            print(f"{indent}{os.path.basename(root)}/")
            
            sub_indent = ' ' * 2 * (level + 1)
            for file in files:
                print(f"{sub_indent}{file}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã
        for file_path in created_files:
            assert os.path.exists(file_path), f"–§–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω: {file_path}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ clean –ø–∞–ø–∫–∏ —Å–æ–∑–¥–∞–Ω—ã
        expected_clean_dirs = [
            os.path.join(temp_dir, "16mm", "16mm_clean"),
            os.path.join(temp_dir, "18mm_V", "18mm_V_clean"),
            os.path.join(temp_dir, "20mm_L", "20mm_L_clean"),
        ]
        
        for clean_dir in expected_clean_dirs:
            assert os.path.exists(clean_dir), f"Clean –ø–∞–ø–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞: {clean_dir}"
            print(f"‚úì Clean –ø–∞–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {clean_dir}")
        
        print("\n=== –†–µ–∞–ª—å–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ! ===")


if __name__ == "__main__":
    try:
        print("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤ –ø–æ –ø–∞–ø–∫–∞–º...")
        
        test_folder_creation()
        test_file_path_organization()
        test_real_world_scenario()
        
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û! üéâ")
        print("\n–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ –ø–æ –ø–∞–ø–∫–∞–º —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ:")
        print("‚úì –ü–∞–ø–∫–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è –ø–æ —à–∞–±–ª–æ–Ω—É: {—Ç–æ–ª—â–∏–Ω–∞}mm_{–º–∞—Ç–µ—Ä–∏–∞–ª}")
        print("‚úì –í–Ω—É—Ç—Ä–∏ –∫–∞–∂–¥–æ–π –ø–∞–ø–∫–∏ —Å–æ–∑–¥–∞–µ—Ç—Å—è –ø—É—Å—Ç–∞—è –ø–∞–ø–∫–∞ {–Ω–∞–∑–≤–∞–Ω–∏–µ}_clean")
        print("‚úì –ö–∞—Ä—Ç—ã —Ä–∞—Å–∫—Ä–æ—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–∞–ø–∫–∏")
        print("‚úì –ö–∞—Ä—Ç—ã –Ω–∞ –ª–∏—Å—Ç–∞—Ö –∏ –æ—Å—Ç–∞—Ç–∫–∞—Ö —Å –æ–¥–∏–Ω–∞–∫–æ–≤–æ–π —Ç–æ–ª—â–∏–Ω–æ–π –∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–º –ø–æ–ø–∞–¥–∞—é—Ç –≤ –æ–¥–Ω—É –ø–∞–ø–∫—É")
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ê–•: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
