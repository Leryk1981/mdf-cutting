"""
–£–ª—É—á—à–µ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è AI-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π.

–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è AI-—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å—Ç–∏–ª–µ–π –∏–∑ UI —à–∞–±–ª–æ–Ω–∞
–¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∏ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.
"""

import queue
import threading
import tkinter as tk
from datetime import datetime
from tkinter import ttk
from typing import Any, Dict, List, Optional

from ...integration.ai_integration_service import AIIntegrationService
from ..desktop_app import DesktopApp
from .styles import AIStyles
from .toast_notification import ToastNotification


class AnimatedProgressBar(ttk.Progressbar):
    """–ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ ui_shablon/css/preloader.css"""

    def __init__(self, master=None, **kwargs):
        super().__init__(master, style="AI.Horizontal.TProgressbar", **kwargs)
        self.animation_active = False
        self.animation_speed = 50  # ms
        self.colors = ["#607D8B", "#90A4AE", "#B0BEC5"]  # –ò–∑ —à–∞–±–ª–æ–Ω–∞
        self.color_index = 0

    def start_animation(self):
        """–ó–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–∏ –∫–∞–∫ –≤ —à–∞–±–ª–æ–Ω–µ"""
        self.animation_active = True
        self._animate()

    def stop_animation(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏"""
        self.animation_active = False
        self["value"] = 0

    def _animate(self):
        """–ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞"""
        if not self.animation_active:
            return

        # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –∫–∞–∫ –≤ —à–∞–±–ª–æ–Ω–µ
        self.color_index = (self.color_index + 1) % len(self.colors)

        # –î–≤–∏–∂–µ–Ω–∏–µ –ø–æ–ª–∑—É–Ω–∫–∞
        value = (self["value"] + 10) % 100
        self["value"] = value

        # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–∞–¥—Ä–∞
        self.after(self.animation_speed, self._animate)


class ImprovedAIControlPanel(ttk.Frame):
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è AI-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π"""

    def __init__(
        self,
        parent: tk.Widget,
        ai_service: AIIntegrationService,
        app: DesktopApp,
    ):
        super().__init__(parent)
        self.ai_service = ai_service
        self.app = app
        self.current_job_id = None
        self.current_suggestions = []
        self.processing_thread = None
        self.message_queue = queue.Queue()

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π
        AIStyles.setup_ai_styles()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self.toast_notification = ToastNotification(self)

        self.setup_ui()
        self.setup_message_processing()

    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å —Ñ–æ–Ω–æ–º –∏–∑ —à–∞–±–ª–æ–Ω–∞
        main_frame = ttk.Frame(self, style="AIPanel.TFrame")
        main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤ —Å—Ç–∏–ª–µ —à–∞–±–ª–æ–Ω–∞
        title_frame = ttk.Frame(main_frame, style="AIPanel.TFrame")
        title_frame.pack(fill=tk.X, pady=(0, 15))

        title_label = ttk.Label(
            title_frame,
            text="ü§ñ AI –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–∞—Å–∫—Ä–æ—è",
            font=("TkDefaultFont", 14, "bold"),
            foreground=AIStyles.COLORS["primary"],
        )
        title_label.pack(side=tk.LEFT, padx=(0, 10))

        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞
        self.status_indicator = ttk.Label(
            title_frame,
            text="‚óè AI –≥–æ—Ç–æ–≤",
            style="AI.Status.TLabel",
            foreground=AIStyles.COLORS["success"],
        )
        self.status_indicator.pack(side=tk.RIGHT)

        # –°–µ–∫—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ AI —Å Material Design —Å—Ç–∏–ª—è–º–∏
        params_frame = ttk.LabelFrame(
            main_frame,
            text="–ü–∞—Ä–∞–º–µ—Ç—Ä—ã AI",
            style="AIPanel.TLabelframe",
            padding=15,
        )
        params_frame.pack(fill=tk.X, pady=(0, 15))

        # –£–ª—É—á—à–µ–Ω–Ω—ã–π AI —Ä–µ–∂–∏–º —Å toggle —Å—Ç–∏–ª–µ–º
        ai_mode_frame = ttk.Frame(params_frame, style="AIPanel.TFrame")
        ai_mode_frame.pack(fill=tk.X, pady=(0, 10))

        self.ai_mode_var = tk.BooleanVar(value=True)
        self.ai_mode_toggle = ttk.Checkbutton(
            ai_mode_frame,
            text="–í–∫–ª—é—á–∏—Ç—å AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ü–∏—é",
            variable=self.ai_mode_var,
            command=self.on_ai_mode_changed,
            style="AI.Toggle.TCheckbutton",
        )
        self.ai_mode_toggle.pack(anchor=tk.W)

        # –£–ª—É—á—à–µ–Ω–Ω—ã–π —Å–ª–∞–π–¥–µ—Ä —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        confidence_frame = ttk.Frame(params_frame, style="AIPanel.TFrame")
        confidence_frame.pack(fill=tk.X, pady=(5, 10))

        confidence_label = ttk.Label(
            confidence_frame,
            text="–ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏:",
            font=("TkDefaultFont", 9),
        )
        confidence_label.pack(anchor=tk.W, pady=(0, 2))

        slider_container = ttk.Frame(confidence_frame, style="AIPanel.TFrame")
        slider_container.pack(fill=tk.X)

        self.confidence_var = tk.DoubleVar(value=0.7)
        self.confidence_scale = ttk.Scale(
            slider_container,
            from_=0.5,
            to=0.95,
            variable=self.confidence_var,
            orient=tk.HORIZONTAL,
            length=250,
            command=self.update_confidence_label,
        )
        self.confidence_scale.pack(side=tk.LEFT, padx=(0, 10))

        self.confidence_label = ttk.Label(
            slider_container,
            text="70%",
            font=("TkDefaultFont", 9, "bold"),
            foreground=AIStyles.COLORS["primary"],
        )
        self.confidence_label.pack(side=tk.LEFT)

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ
        self.auto_apply_var = tk.BooleanVar(value=False)
        auto_apply_check = ttk.Checkbutton(
            params_frame,
            text="–ü—Ä–∏–º–µ–Ω—è—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏",
            variable=self.auto_apply_var,
            style="AI.Toggle.TCheckbutton",
        )
        auto_apply_check.pack(anchor=tk.W, pady=(5, 0))

        # –°–µ–∫—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏–π —Å Material Design –∫–Ω–æ–ø–∫–∞–º–∏
        actions_frame = ttk.LabelFrame(
            main_frame,
            text="–î–µ–π—Å—Ç–≤–∏—è",
            style="AIPanel.TLabelframe",
            padding=15,
        )
        actions_frame.pack(fill=tk.X, pady=(0, 15))

        button_frame = ttk.Frame(actions_frame, style="AIPanel.TFrame")
        button_frame.pack()

        # –ö–Ω–æ–ø–∫–∏ –≤ —Å—Ç–∏–ª–µ —à–∞–±–ª–æ–Ω–∞
        self.optimize_btn = ttk.Button(
            button_frame,
            text="üöÄ AI –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å",
            command=self.optimize_with_ai,
            style="AI.Primary.TButton",
            width=18,
        )
        self.optimize_btn.pack(side=tk.LEFT, padx=(0, 8))

        self.leftover_btn = ttk.Button(
            button_frame,
            text="‚ôªÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Å—Ç–∞—Ç–∫–∏",
            command=self.optimize_with_leftovers,
            style="AI.Success.TButton",
            width=18,
        )
        self.leftover_btn.pack(side=tk.LEFT, padx=(0, 8))

        self.feedback_btn = ttk.Button(
            button_frame,
            text="üí¨ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å",
            command=self.open_feedback_dialog,
            style="AI.Primary.TButton",
            width=18,
        )
        self.feedback_btn.pack(side=tk.LEFT)

        # –°–µ–∫—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
        status_frame = ttk.LabelFrame(
            main_frame,
            text="–°—Ç–∞—Ç—É—Å AI",
            style="AIPanel.TLabelframe",
            padding=15,
        )
        status_frame.pack(fill=tk.X, pady=(0, 15))

        self.status_label = ttk.Label(
            status_frame,
            text="AI –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ",
            font=("TkDefaultFont", 9),
            foreground=AIStyles.COLORS["text_primary"],
        )
        self.status_label.pack(anchor=tk.W, pady=(0, 8))

        # –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        self.progress_bar = AnimatedProgressBar(
            status_frame, mode="indeterminate", length=400
        )
        self.progress_bar.pack(fill=tk.X)

        # –£–ª—É—á—à–µ–Ω–Ω—ã–π –ª–æ–≥ —Å –∫—Ä–∞—Å–∏–≤—ã–º —Å–∫—Ä–æ–ª–ª–æ–º
        log_frame = ttk.LabelFrame(
            main_frame,
            text="–õ–æ–≥ –æ–ø–µ—Ä–∞—Ü–∏–π",
            style="AIPanel.TLabelframe",
            padding=15,
        )
        log_frame.pack(fill=tk.BOTH, expand=True, pady=(0, 15))

        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ª–æ–≥–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–∫—Ä–æ–ª–ª–æ–º
        log_container = ttk.Frame(log_frame, style="AIPanel.TFrame")
        log_container.pack(fill=tk.BOTH, expand=True)

        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –ª–æ–≥–∞
        log_scroll = ttk.Scrollbar(log_container, width=10)
        log_scroll.pack(side=tk.RIGHT, fill=tk.Y)

        self.log_text = tk.Text(
            log_container,
            height=8,
            width=60,
            yscrollcommand=log_scroll.set,
            wrap=tk.WORD,
            font=("TkDefaultFont", 8),
            background="white",
            relief=tk.SOLID,
            borderwidth=1,
            padx=10,
            pady=10,
        )
        self.log_text.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        log_scroll.config(command=self.log_text.yview)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–≥–æ–≤ –¥–ª—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
        self.log_text.tag_config(
            "info", foreground=AIStyles.COLORS["text_primary"]
        )
        self.log_text.tag_config(
            "success", foreground=AIStyles.COLORS["success"]
        )
        self.log_text.tag_config(
            "warning", foreground=AIStyles.COLORS["warning"]
        )
        self.log_text.tag_config("error", foreground=AIStyles.COLORS["danger"])

        # –°–µ–∫—Ü–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ–π
        suggestions_frame = ttk.LabelFrame(
            main_frame,
            text="–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è AI",
            style="AIPanel.TLabelframe",
            padding=15,
        )
        suggestions_frame.pack(fill=tk.BOTH, expand=True)

        # –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        columns = ("ID", "–¢–∏–ø", "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", "–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª")
        self.suggestions_tree = ttk.Treeview(
            suggestions_frame,
            columns=columns,
            show="headings",
            height=7,
            style="AI.Treeview",
        )

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
        for col in columns:
            self.suggestions_tree.heading(col, text=col)
            self.suggestions_tree.column(
                col,
                width=100,
                minwidth=80,
                stretch=tk.NO if col == "ID" else tk.YES,
            )

        # –°–∫—Ä–æ–ª–ª –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
        suggestions_scroll = ttk.Scrollbar(
            suggestions_frame,
            orient=tk.VERTICAL,
            command=self.suggestions_tree.yview,
        )
        suggestions_scroll.pack(side=tk.RIGHT, fill=tk.Y)
        self.suggestions_tree.configure(yscrollcommand=suggestions_scroll.set)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–≥–æ–≤ –¥–ª—è —Å—Ç—Ä–æ–∫
        self.suggestions_tree.tag_configure(
            "high_confidence", background=AIStyles.COLORS["success"] + "20"
        )
        self.suggestions_tree.tag_configure(
            "medium_confidence", background=AIStyles.COLORS["warning"] + "30"
        )
        self.suggestions_tree.tag_configure(
            "low_confidence", background=AIStyles.COLORS["danger"] + "20"
        )

        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
        self.setup_suggestion_menu()

        # –°—Ç–∞—Ç—É—Å –±–∞—Ä –≤–Ω–∏–∑—É
        self.setup_status_bar(main_frame)

    def setup_status_bar(self, parent: ttk.Widget):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∞—Ç—É—Å –±–∞—Ä–∞ –∫–∞–∫ –≤ —à–∞–±–ª–æ–Ω–µ"""
        status_bar = ttk.Label(
            parent,
            text="AI –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ",
            relief=tk.SUNKEN,
            anchor=tk.W,
            padding=(5, 2),
            font=("TkDefaultFont", 8),
            foreground=AIStyles.COLORS["secondary"],
        )
        status_bar.pack(fill=tk.X, side=tk.BOTTOM, pady=(10, 0))

        self.status_bar_label = status_bar

    def setup_message_processing(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Ñ–æ–Ω–æ–≤—ã—Ö –ø–æ—Ç–æ–∫–æ–≤"""
        self.after(100, self.process_messages)

    def process_messages(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏"""
        try:
            while not self.message_queue.empty():
                message = self.message_queue.get_nowait()

                if message["type"] == "log":
                    self.log_message(
                        message["text"], message.get("tag", "info")
                    )
                elif message["type"] == "status":
                    self.status_label.config(text=message["text"])
                elif message["type"] == "status_bar":
                    self.status_bar_label.config(text=message["text"])
                elif message["type"] == "toast":
                    self.toast_notification.show(
                        message["text"], message.get("level", "info")
                    )
                elif message["type"] == "update_suggestions":
                    self.update_suggestions(message["suggestions"])

        except queue.Empty:
            pass

        self.after(100, self.process_messages)

    def update_confidence_label(self, value):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∫–∏ –ø–æ—Ä–æ–≥–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏"""
        confidence = int(float(value) * 100)
        self.confidence_label.config(text=f"{confidence}%")

    def log_message(self, message: str, tag: str = "info"):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        log_entry = f"[{timestamp}] {message}\n"

        self.log_text.insert(tk.END, log_entry, tag)
        self.log_text.see(tk.END)

        # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–Ω–∏–∑
        self.log_text.yview_moveto(1)

    def send_message(self, msg_type: str, text: str, **kwargs):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        message = {"type": msg_type, "text": text, **kwargs}
        self.message_queue.put(message)

    def optimize_with_ai(self):
        """–ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å AI —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π"""
        if self.processing_thread and self.processing_thread.is_alive():
            self.toast_notification.show(
                "AI —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å", "warning"
            )
            return

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞
        order_data = self.get_current_order_data()
        if not order_data:
            self.toast_notification.show("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏", "error")
            return

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
        self.set_processing_state(True)
        self.send_message("status_bar", "AI –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å...")
        self.send_message("log", "–ó–∞–ø—É—Å–∫ AI-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏", "info")

        # –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self.processing_thread = threading.Thread(
            target=self._perform_optimization, args=(order_data,), daemon=True
        )
        self.processing_thread.start()

    def _perform_optimization(self, order_data: Dict[str, Any]):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ AI
            self.ai_service.ai_assistance_mode = self.ai_mode_var.get()
            self.ai_service.auto_apply_corrections = self.auto_apply_var.get()
            self.ai_service.confidence_threshold = self.confidence_var.get()

            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            result = self.ai_service.process_cutting_job(order_data)

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫
            self.send_message("log", "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞", "success")
            self.send_message(
                "status_bar",
                f"–ì–æ—Ç–æ–≤–æ. –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result.get('ai_confidence', 0):.2f}",
            )

            if result.get("status") == "success":
                self.send_message(
                    "update_suggestions",
                    suggestions=result.get("ai_enhancements", []),
                )
                self.after(
                    0,
                    lambda: self.app.update_dxf_display(
                        result.get("final_dxf")
                    ),
                )

                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
                suggestions_count = len(result.get("ai_enhancements", []))
                self.send_message(
                    "toast",
                    f"–ù–∞–π–¥–µ–Ω–æ {suggestions_count} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è",
                    "success",
                )
            else:
                self.send_message(
                    "log", f"–û—à–∏–±–∫–∞: {result.get('error', 'Unknown')}", "error"
                )
                self.send_message(
                    "toast",
                    f"–û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {result.get('error')}",
                    "error",
                )

            self.after(0, self.on_optimization_completed, result)

        except Exception as e:
            error_msg = str(e)
            self.send_message("log", f"–û—à–∏–±–∫–∞: {error_msg}", "error")
            self.send_message(
                "toast", f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {error_msg}", "error"
            )
            self.after(0, self.on_optimization_failed, error_msg)

    def on_optimization_completed(self, result: Dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        self.set_processing_state(False)
        self.status_indicator.config(
            text="‚óè AI –≥–æ—Ç–æ–≤", foreground=AIStyles.COLORS["success"]
        )

    def on_optimization_failed(self, error_msg: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        self.set_processing_state(False)
        self.status_indicator.config(
            text="‚óè –û—à–∏–±–∫–∞ AI", foreground=AIStyles.COLORS["danger"]
        )
        self.status_label.config(text=f"–û—à–∏–±–∫–∞: {error_msg}")
        self.status_bar_label.config(text="AI –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ")

    def set_processing_state(self, processing: bool):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π"""
        if processing:
            self.optimize_btn.config(state=tk.DISABLED)
            self.leftover_btn.config(state=tk.DISABLED)
            self.status_label.config(text="AI –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ...")
            self.status_indicator.config(
                text="‚óè AI —Ä–∞–±–æ—Ç–∞–µ—Ç", foreground=AIStyles.COLORS["warning"]
            )
            self.progress_bar.start_animation()
        else:
            self.optimize_btn.config(state=tk.NORMAL)
            self.leftover_btn.config(state=tk.NORMAL)
            self.progress_bar.stop_animation()

    def optimize_with_leftovers(self):
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –æ—Å—Ç–∞—Ç–∫–æ–≤"""
        available_leftovers = self.get_available_leftovers()

        if not available_leftovers:
            self.toast_notification.show("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤", "info")
            return

        order_data = self.get_current_order_data()
        if not order_data:
            return

        self.set_processing_state(True)
        self.send_message("status_bar", "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏...")
        self.send_message(
            "log", f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ {len(available_leftovers)} –æ—Å—Ç–∞—Ç–∫–æ–≤", "info"
        )

        self.processing_thread = threading.Thread(
            target=self._perform_leftover_optimization,
            args=(order_data, available_leftovers),
            daemon=True,
        )
        self.processing_thread.start()

    def _perform_leftover_optimization(
        self, order_data: Dict, leftovers: List[Dict]
    ):
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏ –≤ —Ñ–æ–Ω–µ"""
        try:
            result = self.ai_service.process_with_leftovers(
                order_data, leftovers
            )

            savings = result.get("material_savings", 0)
            self.send_message(
                "log", f"–≠–∫–æ–Ω–æ–º–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞: {savings:.1f}%", "success"
            )
            self.send_message(
                "status_bar", f"–ì–æ—Ç–æ–≤–æ. –≠–∫–æ–Ω–æ–º–∏—è: {savings:.1f}%"
            )
            self.send_message(
                "toast", f"–°—ç–∫–æ–Ω–æ–º–ª–µ–Ω–æ {savings:.1f}% –º–∞—Ç–µ—Ä–∏–∞–ª–∞!", "success"
            )

            self.after(0, self.on_leftover_optimization_completed, result)

        except Exception as e:
            error_msg = str(e)
            self.send_message(
                "log", f"–û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏: {error_msg}", "error"
            )
            self.after(0, self.on_optimization_failed, error_msg)

    def on_leftover_optimization_completed(self, result: Dict[str, Any]):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏"""
        self.set_processing_state(False)
        self.status_indicator.config(
            text="‚óè AI –≥–æ—Ç–æ–≤", foreground=AIStyles.COLORS["success"]
        )
        self.app.update_dxf_display(result.get("final_dxf"))

    def apply_selected_suggestion(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
        selected_items = self.suggestions_tree.selection()
        if not selected_items:
            self.toast_notification.show(
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è", "warning"
            )
            return

        item_id = selected_items[0]
        suggestion = self.getSuggestionData(item_id)

        if suggestion:
            self.send_message(
                "log",
                f'–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {suggestion.get("correction_type")}',
                "info",
            )

            # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            if hasattr(self.app, "apply_correction"):
                self.app.apply_correction(suggestion)
                self.send_message(
                    "toast", "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!", "success"
                )

                # –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞
                self.suggestions_tree.delete(item_id)
            else:
                self.toast_notification.show(
                    "–ú–µ—Ç–æ–¥ apply_correction –Ω–µ –Ω–∞–π–¥–µ–Ω", "error"
                )

    def show_suggestion_details(self):
        """–ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª–µ–π –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
        selected_items = self.suggestions_tree.selection()
        if not selected_items:
            return

        suggestion = self.getSuggestionData(selected_items[0])
        if suggestion:
            DetailDialog(self, suggestion)

    def reject_suggestion(self):
        """–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
        selected_items = self.suggestions_tree.selection()
        if selected_items:
            self.suggestions_tree.delete(selected_items[0])
            self.send_message(
                "log", "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º", "warning"
            )
            self.toast_notification.show("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ", "info")

    def update_suggestions(self, suggestions: List[Dict[str, Any]]):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Å —Ü–≤–µ—Ç–æ–≤—ã–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º"""
        # –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
        for item in self.suggestions_tree.get_children():
            self.suggestions_tree.delete(item)

        self.current_suggestions = suggestions

        for i, suggestion in enumerate(suggestions):
            confidence = suggestion.get("confidence", 0)
            values = (
                suggestion.get("piece_id", "N/A"),
                suggestion.get("correction_type", "N/A"),
                f"{confidence:.2f}",
                f"{suggestion.get('expected_improvement', 0):.3f}",
            )

            item_id = self.suggestions_tree.insert("", tk.END, values=values)

            # –¶–≤–µ—Ç–æ–≤–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ –ø–æ —É—Ä–æ–≤–Ω—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            if confidence >= 0.8:
                self.suggestions_tree.item(item_id, tags=("high_confidence",))
            elif confidence >= 0.6:
                self.suggestions_tree.item(
                    item_id, tags=("medium_confidence",)
                )
            else:
                self.suggestions_tree.item(item_id, tags=("low_confidence",))

    def getSuggestionData(self, item_id: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
        try:
            index = int(item_id.split("_")[1])
            return (
                self.current_suggestions[index]
                if index < len(self.current_suggestions)
                else None
            )
        except (IndexError, ValueError):
            return None

    def get_current_order_data(self) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–∫–∞–∑–∞"""
        try:
            pieces_data = (
                self.app.get_pieces_data()
                if hasattr(self.app, "get_pieces_data")
                else []
            )

            if not pieces_data:
                return None

            return {
                "order_id": f"order_{datetime.now().strftime('%Y%m%d_%H%M%S')}",
                "material_code": getattr(
                    self.app, "get_material_code", lambda: "MDF16"
                )(),
                "thickness": getattr(
                    self.app, "get_material_thickness", lambda: 16.0
                )(),
                "pieces": pieces_data,
            }
        except Exception as e:
            self.send_message(
                "log", f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞: {str(e)}", "error"
            )
            return None

    def get_available_leftovers(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤"""
        # –°–∏–º—É–ª—è—Ü–∏—è - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å –∫ –ë–î
        return [
            {
                "id": "leftover_001",
                "area": 50000,
                "material_code": "MDF16",
                "geometry": {"width": 200, "height": 250},
            },
            {
                "id": "leftover_002",
                "area": 75000,
                "material_code": "MDF16",
                "geometry": {"width": 300, "height": 250},
            },
        ]

    def setup_suggestion_menu(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é"""
        self.suggestion_menu = tk.Menu(self, tearoff=0)
        self.suggestion_menu.add_command(
            label="‚úì –ü—Ä–∏–º–µ–Ω–∏—Ç—å", command=self.apply_selected_suggestion
        )
        self.suggestion_menu.add_command(
            label="üìã –ü–æ–¥—Ä–æ–±–Ω–µ–µ", command=self.show_suggestion_details
        )
        self.suggestion_menu.add_separator()
        self.suggestion_menu.add_command(
            label="‚úó –û—Ç–∫–ª–æ–Ω–∏—Ç—å", command=self.reject_suggestion
        )

        self.suggestions_tree.bind("<Button-3>", self.show_suggestion_menu)
        self.suggestions_tree.bind(
            "<Double-1>", lambda e: self.apply_selected_suggestion()
        )

    def show_suggestion_menu(self, event):
        """–ü–æ–∫–∞–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é"""
        if self.suggestions_tree.identify_region(event.x, event.y) == "cell":
            self.suggestion_menu.post(event.x_root, event.y_root)

    def on_ai_mode_changed(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ AI"""
        mode = "–≤–∫–ª—é—á–µ–Ω–∞" if self.ai_mode_var.get() else "–≤—ã–∫–ª—é—á–µ–Ω–∞"
        self.send_message("log", f"AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ü–∏—è {mode}", "info")

        status_text = (
            "‚óè AI –≥–æ—Ç–æ–≤" if self.ai_mode_var.get() else "‚óè AI –≤—ã–∫–ª—é—á–µ–Ω"
        )
        status_color = (
            AIStyles.COLORS["success"]
            if self.ai_mode_var.get()
            else AIStyles.COLORS["danger"]
        )
        self.status_indicator.config(text=status_text, foreground=status_color)

    def open_feedback_dialog(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
        from .feedback_dialog import ImprovedFeedbackDialog

        ImprovedFeedbackDialog(self, self.ai_service.feedback_collector)


class DetailDialog(tk.Toplevel):
    """–î–∏–∞–ª–æ–≥ –¥–µ—Ç–∞–ª–µ–π –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""

    def __init__(self, parent, suggestion_data):
        super().__init__(parent)
        self.suggestion_data = suggestion_data

        self.title("–î–µ—Ç–∞–ª–∏ AI-–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")
        self.geometry("450x350")
        self.resizable(False, False)

        self.setup_dialog()

    def setup_dialog(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∏–∞–ª–æ–≥–∞ –≤ —Å—Ç–∏–ª–µ —à–∞–±–ª–æ–Ω–∞"""
        main_frame = ttk.Frame(self, padding=20)
        main_frame.pack(fill=tk.BOTH, expand=True)

        title_label = ttk.Label(
            main_frame,
            text="üìã –î–µ—Ç–∞–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è",
            font=("TkDefaultFont", 12, "bold"),
            foreground=AIStyles.COLORS["primary"],
        )
        title_label.pack(pady=(0, 15))

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏
        info_frame = ttk.LabelFrame(main_frame, text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", padding=10)
        info_frame.pack(fill=tk.X, pady=(0, 10))

        details = [
            (
                "–¢–∏–ø –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏:",
                self.suggestion_data.get("correction_type", "N/A"),
            ),
            ("ID –¥–µ—Ç–∞–ª–∏:", self.suggestion_data.get("piece_id", "N/A")),
            (
                "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å AI:",
                f"{self.suggestion_data.get('confidence', 0):.2f}",
            ),
            (
                "–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª —É–ª—É—á—à–µ–Ω–∏—è:",
                f"{self.suggestion_data.get('expected_improvement', 0):.3f}",
            ),
        ]

        for label, value in details:
            row_frame = ttk.Frame(info_frame)
            row_frame.pack(fill=tk.X, pady=2)

            ttk.Label(
                row_frame, text=label, font=("TkDefaultFont", 9, "bold")
            ).pack(side=tk.LEFT)
            ttk.Label(row_frame, text=str(value)).pack(side=tk.RIGHT)

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
        params_frame = ttk.LabelFrame(main_frame, text="–ü–∞—Ä–∞–º–µ—Ç—Ä—ã", padding=10)
        params_frame.pack(fill=tk.BOTH, expand=True, pady=(0, 10))

        params_text = tk.Text(params_frame, wrap=tk.WORD, height=8)
        params_text.pack(fill=tk.BOTH, expand=True)

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        params_content = "\n".join(
            [
                f"  {key}: {value}"
                for key, value in self.suggestion_data.get(
                    "parameters", {}
                ).items()
            ]
        )
        params_text.insert(tk.END, params_content)
        params_text.config(state=tk.DISABLED)

        # –ö–Ω–æ–ø–∫–∏
        button_frame = ttk.Frame(main_frame)
        button_frame.pack(fill=tk.X)

        ttk.Button(
            button_frame,
            text="–ó–∞–∫—Ä—ã—Ç—å",
            command=self.destroy,
            style="AI.Primary.TButton",
        ).pack(side=tk.RIGHT)
