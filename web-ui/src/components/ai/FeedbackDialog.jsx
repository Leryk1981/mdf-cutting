import React, { useState } from 'react'
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  TextField,
  Rating,
  Box,
  Typography,
  FormControlLabel,
  Checkbox,
  Grid,
} from '@mui/material'
import { useDispatch } from 'react-redux'
import { submitFeedback } from '../../store/slices/aiSlice.js'

const FeedbackDialog = ({ open, onClose }) => {
  const dispatch = useDispatch()
  const [feedback, setFeedback] = useState({
    satisfactionRating: 3,
    acceptedCorrections: '',
    rejectedCorrections: '',
    comments: '',
    includeInTraining: true,
  })

  const handleSubmit = () => {
    const feedbackData = {
      ...feedback,
      acceptedCorrections: feedback.acceptedCorrections
        .split(',')
        .map(id => id.trim())
        .filter(id => id),
      rejectedCorrections: feedback.rejectedCorrections
        .split(',')
        .map(id => id.trim())
        .filter(id => id),
    }

    dispatch(submitFeedback(feedbackData))
    onClose()
    
    // Reset form
    setFeedback({
      satisfactionRating: 3,
      acceptedCorrections: '',
      rejectedCorrections: '',
      comments: '',
      includeInTraining: true,
    })
  }

  const handleClose = () => {
    onClose()
    // Reset form
    setFeedback({
      satisfactionRating: 3,
      acceptedCorrections: '',
      rejectedCorrections: '',
      comments: '',
      includeInTraining: true,
    })
  }

  return (
    <Dialog open={open} onClose={handleClose} maxWidth="md" fullWidth>
      <DialogTitle>
        <Typography variant="h6">
          üí¨ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ —Ä–∞–±–æ—Ç–µ AI
        </Typography>
        <Typography variant="body2" color="text.secondary">
          –í–∞—à –æ—Ç–∑—ã–≤ –ø–æ–º–æ–∂–µ—Ç —É–ª—É—á—à–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å–∏—Å—Ç–µ–º—ã
        </Typography>
      </DialogTitle>
      
      <DialogContent>
        <Grid container spacing={3}>
          {/* Rating */}
          <Grid item xs={12}>
            <Typography component="legend" gutterBottom>
              –û—Ü–µ–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É AI
            </Typography>
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
              <Rating
                value={feedback.satisfactionRating}
                onChange={(event, newValue) => {
                  setFeedback(prev => ({ ...prev, satisfactionRating: newValue }))
                }}
                size="large"
              />
              <Typography variant="body2" color="text.secondary">
                {feedback.satisfactionRating}/5 –∑–≤–µ–∑–¥
              </Typography>
            </Box>
          </Grid>

          {/* Accepted Corrections */}
          <Grid item xs={12} md={6}>
            <TextField
              fullWidth
              label="–ü—Ä–∏–Ω—è—Ç—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (ID —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)"
              value={feedback.acceptedCorrections}
              onChange={(e) => setFeedback(prev => ({ 
                ...prev, 
                acceptedCorrections: e.target.value 
              }))}
              placeholder="S1, S3, S5"
              helperText="–í–≤–µ–¥–∏—Ç–µ ID –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –ø—Ä–∏–Ω—è–ª–∏"
            />
          </Grid>

          {/* Rejected Corrections */}
          <Grid item xs={12} md={6}>
            <TextField
              fullWidth
              label="–û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (ID —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)"
              value={feedback.rejectedCorrections}
              onChange={(e) => setFeedback(prev => ({ 
                ...prev, 
                rejectedCorrections: e.target.value 
              }))}
              placeholder="S2, S4"
              helperText="–í–≤–µ–¥–∏—Ç–µ ID –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏"
            />
          </Grid>

          {/* Comments */}
          <Grid item xs={12}>
            <TextField
              fullWidth
              multiline
              rows={4}
              label="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏"
              value={feedback.comments}
              onChange={(e) => setFeedback(prev => ({ 
                ...prev, 
                comments: e.target.value 
              }))}
              placeholder="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ–µ–º –æ–ø—ã—Ç–µ —Ä–∞–±–æ—Ç—ã —Å AI..."
              helperText="–í–∞—à–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ–º–æ–≥—É—Ç —É–ª—É—á—à–∏—Ç—å —Å–∏—Å—Ç–µ–º—É"
            />
          </Grid>

          {/* Training Checkbox */}
          <Grid item xs={12}>
            <FormControlLabel
              control={
                <Checkbox
                  checked={feedback.includeInTraining}
                  onChange={(e) => setFeedback(prev => ({ 
                    ...prev, 
                    includeInTraining: e.target.checked 
                  }))}
                  color="primary"
                />
              }
              label="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –æ—Ç–∑—ã–≤ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è AI"
            />
          </Grid>
        </Grid>
      </DialogContent>
      
      <DialogActions>
        <Button onClick={handleClose} color="inherit">
          –û—Ç–º–µ–Ω–∞
        </Button>
        <Button 
          onClick={handleSubmit} 
          variant="contained" 
          color="primary"
          disabled={feedback.satisfactionRating === 0}
        >
          –û—Ç–ø—Ä–∞–≤–∏—Ç—å
        </Button>
      </DialogActions>
    </Dialog>
  )
}

export default FeedbackDialog 